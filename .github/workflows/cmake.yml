name: cmake
# cmake build of tesseract and training tools with gcc and clang on ubuntu.
# cmake build of tesseract and training tools with gcc and clang on macOS homebrew using Ninja.
# test command line version of tesseract.
on:
  push:
  schedule:
    - cron: 0 21 * * *

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          
          - { name: macos-10.15-clang-12-cmake-build, os: macos-10.15, cc: clang, cxx: clang++ } # defualt
          - { name: macos-10.15-clang-11-cmake-build, os: macos-10.15, cc: '$(brew --prefix llvm)/bin/clang', cxx: '$(brew --prefix llvm)/bin/clang++' }  #installed
          - { name: macos-10.15-gcc-8-cmake-build, os: macos-10.15, cc: gcc-8, cxx: g++-8 } #installed
          - { name: macos-10.15-gcc-9-cmake-build, os: macos-10.15, cc: gcc-9, cxx: g++-9 } #installed
          - { name: macos-10.15-gcc-10-cmake-build, os: macos-10.15, cc: gcc-10, cxx: g++-10 } #installed
          
          - { name: ubuntu-18.04-clang-7-cmake-build, os: ubuntu-18.04, cc: clang-7,  cxx: clang++-7 }
###          - { name: ubuntu-18.04-clang-8-cmake-build, os: ubuntu-18.04, cc: clang-8,  cxx: clang++-8 } #installed
###          - { name: ubuntu-18.04-clang-9-cmake-build, os: ubuntu-18.04, cc: clang-9,  cxx: clang++-9 } #installed
###          - { name: ubuntu-18.04-clang-10-cmake-build, os: ubuntu-18.04, cc: clang-10,  cxx: clang++-10 }
###          
###          - { name: ubuntu-18.04-gcc-7-cmake-build, os: ubuntu-18.04, cc: gcc-7,  cxx: g++-7 } #installed
###          - { name: ubuntu-18.04-gcc-8-cmake-build, os: ubuntu-18.04, cc: gcc-8,  cxx: g++-8 } #installed
###          - { name: ubuntu-18.04-gcc-9-cmake-build, os: ubuntu-18.04, cc: gcc-9,  cxx: g++-9 } #installed
###          - { name: ubuntu-18.04-gcc-10-cmake-build, os: ubuntu-18.04, cc: gcc-10,  cxx: g++-10 } #installed
###          
###          - { name: ubuntu-20.04-clang-7-cmake-build, os: ubuntu-20.04, cc: clang-7, cxx: clang++-7 }
###          - { name: ubuntu-20.04-clang-8-cmake-build, os: ubuntu-20.04, cc: clang-8, cxx: clang++-8 } #installed
###          - { name: ubuntu-20.04-clang-9-cmake-build, os: ubuntu-20.04, cc: clang-9, cxx: clang++-9 } #installed
###          - { name: ubuntu-20.04-clang-10-cmake-build, os: ubuntu-20.04, cc: clang-10, cxx: clang++-10 } #installed
###          
###          - { name: ubuntu-20.04-gcc-7-cmake-build, os: ubuntu-20.04, cc: gcc-7, cxx: g++-7 } #installed
###          - { name: ubuntu-20.04-gcc-8-cmake-build, os: ubuntu-20.04, cc: gcc-8, cxx: g++-8 } #installed
###          - { name: ubuntu-20.04-gcc-9-cmake-build, os: ubuntu-20.04, cc: gcc-9, cxx: g++-9 } #installed
          - { name: ubuntu-20.04-gcc-10-cmake-build, os: ubuntu-20.04, cc: gcc-10, cxx: g++-10 } #installed
          
    steps:
      - name: Install compilers on Linux
        run: |
             sudo apt-get install ${{ matrix.config.cc }} ${{ matrix.config.cxx }} -y
        if: runner.os == 'Linux'

      - name: Install dependencies on Linux
        run: |
             sudo apt-get install ninja-build libleptonica-dev libpango1.0-dev -y
        if: runner.os == 'Linux'

      - name: Install dependencies on macOS
        run: |
             brew install cmake ninja leptonica pango libarchive icu4c
             ninja --version
             cmake --version
        if: runner.os == 'macOS'
        
      - name: Checkout Source
        uses: actions/checkout@v2
        with:
             submodules: recursive
        
      - name: Configure (Linux)
        run: |
             mkdir build
             mkdir inst
             cmake \
               -S . \
               -B build \
               -G Ninja \
               -DCMAKE_BUILD_TYPE=Release \
               -DOPENMP_BUILD=OFF \
               -DCMAKE_C_COMPILER=${{ matrix.config.cc }}  \
               -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
               -DCMAKE_INSTALL_PREFIX:PATH=inst
        if: runner.os == 'Linux'

      - name: Configure (macOS)
        shell: bash
        run: |
             set -e
             export PKG_CONFIG_PATH=$(brew --prefix)/opt/icu4c/lib/pkgconfig:$(brew --prefix)/opt/libarchive/lib/pkgconfig:/$(brew --prefix)/opt/libffi/lib/pkgconfig:$PKG_CONFIG_PATH
             mkdir build
             mkdir inst
             cmake \
               -S . \
               -B build \
               -G Ninja \
               -DCMAKE_BUILD_TYPE=Release \
               -DOPENMP_BUILD=OFF \
               -DCMAKE_C_COMPILER=${{ matrix.config.cc }}  \
               -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }} \
               -DCMAKE_INSTALL_PREFIX:PATH=inst
        if: runner.os == 'macOS'
                
      - name: Build
        run: |
             cmake --build build --config Release --target install
      
      - name: Run Tesseract on phototest.tif and raaj.tif
        run: |
             build/inst/bin/tesseract test/testing/phototest.tif -  --tessdata-dir ../tessdata
             build/inst/bin/tesseract test/testing/raaj.tif - -l hin  --tessdata-dir ../tessdata
        
      - name: Build and run basicapitest
        run: |
             cd cmaketest
             ${{ matrix.config.cxx }} basicapitest.cpp `pkg-config --cflags --libs tesseract lept ` -fopenmp  -pthread -o basicapitest 
             ./basicapitest
        
      - name: Display Tesseract Version
        run: |
             build/inst/bin/tesseract -v
             
      - name: Display Training Tools Version
        run: |
             build/inst/bin/lstmtraining -v
             build/inst/bin/text2image -v

      - name: Display Compiler Version
        run: |
             ${{ matrix.config.cc }} --version
             ${{ matrix.config.cxx }} --version
             git log -3 --pretty=format:'%h %ad %s | %an' 
        if: always()
